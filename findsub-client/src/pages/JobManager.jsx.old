import { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import FeedbackForm from './FeedbackForm';

function JobManager() {
  console.log("Rendering: JobManager.jsx");

  const [user, setUser] = useState(null);
  const [jobs, setJobs] = useState([]);
  const [applications, setApplications] = useState([]);
  const [selectedJob, setSelectedJob] = useState(null);
  const [selectedJobData, setSelectedJobData] = useState(null);
  const [showFeedbackForm, setShowFeedbackForm] = useState(false);

  const navigate = useNavigate();

  useEffect(() => {
    const stored = localStorage.getItem('user');
    if (stored) {
      const parsed = JSON.parse(stored);
      setUser(parsed);

      fetch(`http://localhost:5000/api/jobs?view=poster&posterId=${parsed.id}`)
        .then(res => res.json())
        .then(data => {
          // Show only editable, open jobs with no selected sub
          const myJobs = data.jobs.filter(job =>
            job.posterId?._id === parsed.id &&
            job.status === 'open' &&
            !job.selectedApplicant
          );
          setJobs(myJobs);
        });
    }
  }, []);

  const loadApplicants = async (jobId) => {
    setSelectedJob(jobId);

    const res = await fetch(`http://localhost:5000/api/applications/${jobId}`);
    const data = await res.json();
    setApplications(data.applications || []);

    const jobInfo = jobs.find(j => j._id === jobId);
    setSelectedJobData(jobInfo);

    setShowFeedbackForm(false);
  };

  const selectApplicant = async (applicantId) => {
    const confirmSelection = window.confirm('Are you sure you want to select this applicant? This will close the job.');
    if (!confirmSelection) return;

    const res = await fetch('http://localhost:5000/api/jobs/select', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ jobId: selectedJob, applicantId })
    });

    const data = await res.json();
    alert(data.message);
    window.location.reload();
  };

  const updateJobStatus = async (newStatus) => {
    const confirmStatus = window.confirm(`Are you sure you want to mark this job as ${newStatus}?`);
    if (!confirmStatus) return;

    const res = await fetch('http://localhost:5000/api/jobs/status', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ jobId: selectedJob, newStatus })
    });

    const data = await res.json();
    alert(data.message);
    window.location.reload();
  };

  return (
    <div>
      <h2>My Listings (Unfilled Jobs)</h2>
      {jobs.length === 0 ? (
        <p>No active unfilled listings.</p>
      ) : (
        jobs.map(job => (
          <div key={job._id} style={{ border: '1px solid #ccc', padding: '1rem', marginBottom: '1rem' }}>
            <h3><Link to={`/job/${job._id}`}>{job.title}</Link></h3>
            <p>{job.description}</p>
            <p><strong>Status:</strong> {job.status}</p>
            <button onClick={() => navigate(`/jobs/edit/${job._id}`)}>‚úèÔ∏è Edit Job</button>
            <button onClick={() => loadApplicants(job._id)}>üìÇ View Applicants</button>
          </div>
        ))
      )}

      {selectedJobData && (
        <div style={{ marginTop: '2rem' }}>
          <h3>Applicants for: {selectedJobData.title}</h3>
          {applications.length === 0 ? (
            <p>No applicants yet.</p>
          ) : (
            applications.map(app => (
              <div key={app._id} style={{ border: '1px solid #ddd', padding: '0.5rem', marginBottom: '0.5rem' }}>
                <p><strong>Username:</strong> {app.applicantId.username}</p>
                <p><strong>Experience:</strong> {app.applicantId.experienceLevel}</p>
                {app.coverLetter && <p><strong>Cover Letter:</strong> {app.coverLetter}</p>}
                <button onClick={() => selectApplicant(app.applicantId._id)}>‚úÖ Select This Sub</button>
              </div>
            ))
          )}

          <div style={{ marginTop: '1rem' }}>
            <button onClick={() => updateJobStatus('cancelled')}>‚ùå Cancel Job</button>
          </div>
        </div>
      )}

      {showFeedbackForm && selectedJobData && (
        <FeedbackForm
          jobId={selectedJobData._id}
          fromUser={user.id}
          toUser={selectedJobData.selectedApplicant}
          role={user.role}
          targetInterests={selectedJobData.posterId?.kinks || []}
        />
      )}
    </div>
  );
}

export default JobManager;
